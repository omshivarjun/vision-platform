#!/bin/bash

# Vision Platform - Development Script
# This script starts the full local development stack

set -e

echo "üöÄ Starting Vision Platform Development Environment..."

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker is not running. Please start Docker and try again."
    exit 1
fi

# Check if Docker Compose is available
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose is not installed. Please install Docker Compose and try again."
    exit 1
fi

# Function to cleanup on exit
cleanup() {
    echo "üõë Stopping development environment..."
    docker-compose down
    echo "‚úÖ Development environment stopped."
    exit 0
}

# Set trap to cleanup on script exit
trap cleanup SIGINT SIGTERM

# Create necessary directories
echo "üìÅ Creating necessary directories..."
mkdir -p infrastructure/mongodb/init
mkdir -p infrastructure/nginx
mkdir -p infrastructure/monitoring
mkdir -p logs

# Check if .env file exists, if not create from example
if [ ! -f .env ]; then
    if [ -f .env.example ]; then
        echo "üìã Creating .env file from .env.example..."
        cp .env.example .env
    else
        echo "‚ö†Ô∏è  No .env file found. Please create one with your configuration."
        exit 1
    fi
fi

# Install dependencies if needed
echo "üì¶ Installing dependencies..."
if [ ! -d "node_modules" ]; then
    npm install
fi

# Build shared package
echo "üî® Building shared package..."
cd packages/shared
npm install
npm run build
cd ../..

# Build and start services
echo "üê≥ Building and starting Docker services..."
docker-compose build

echo "üöÄ Starting all services..."
docker-compose up -d

# Wait for services to be ready
echo "‚è≥ Waiting for services to be ready..."
sleep 10

# Check service health
echo "üîç Checking service health..."

# Check MongoDB
if docker-compose exec -T mongodb mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
    echo "‚úÖ MongoDB is ready"
else
    echo "‚ùå MongoDB is not ready"
fi

# Check Redis
if docker-compose exec -T redis redis-cli ping > /dev/null 2>&1; then
    echo "‚úÖ Redis is ready"
else
    echo "‚ùå Redis is not ready"
fi

# Check MinIO
if curl -s http://localhost:9000/minio/health/live > /dev/null; then
    echo "‚úÖ MinIO is ready"
else
    echo "‚ùå MinIO is not ready"
fi

# Check API service
if curl -s http://localhost:3001/health > /dev/null; then
    echo "‚úÖ API service is ready"
else
    echo "‚ùå API service is not ready"
fi

# Check AI service
if curl -s http://localhost:8000/health > /dev/null; then
    echo "‚úÖ AI service is ready"
else
    echo "‚ùå AI service is not ready"
fi

# Check Web frontend
if curl -s http://localhost:3000 > /dev/null; then
    echo "‚úÖ Web frontend is ready"
else
    echo "‚ùå Web frontend is not ready"
fi

echo ""
echo "üéâ Vision Platform Development Environment is running!"
echo ""
echo "üì± Services:"
echo "   ‚Ä¢ Web Frontend: http://localhost:3000"
echo "   ‚Ä¢ API Service: http://localhost:3001"
echo "   ‚Ä¢ AI Service: http://localhost:8000"
echo "   ‚Ä¢ Mobile Dev: http://localhost:19000"
echo "   ‚Ä¢ MinIO Console: http://localhost:9001"
echo "   ‚Ä¢ Grafana: http://localhost:3002"
echo "   ‚Ä¢ Prometheus: http://localhost:9090"
echo ""
echo "üîß Useful commands:"
echo "   ‚Ä¢ View logs: docker-compose logs -f [service]"
echo "   ‚Ä¢ Stop services: docker-compose down"
echo "   ‚Ä¢ Restart service: docker-compose restart [service]"
echo "   ‚Ä¢ Rebuild service: docker-compose up -d --build [service]"
echo ""
echo "üìä Monitoring:"
echo "   ‚Ä¢ View all logs: docker-compose logs -f"
echo "   ‚Ä¢ Check service status: docker-compose ps"
echo ""
echo "Press Ctrl+C to stop all services"

# Keep script running and show logs
docker-compose logs -f

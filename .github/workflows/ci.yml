name: Vision Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}

jobs:
  # Lint and format check
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        npm ci
        cd services/ai && pip install -r requirements.txt
        
    - name: Run ESLint
      run: npm run lint
      
    - name: Run Prettier check
      run: npm run format:check
      
    - name: Run Python linting
      run: |
        cd services/ai
        pip install flake8 black mypy
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        mypy .

  # Type checking
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript check
      run: npm run type-check

  # Unit tests
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        npm ci
        cd services/ai && pip install -r requirements.txt
        
    - name: Run tests
      run: npm run test
      env:
        MONGODB_URI: mongodb://localhost:27017/vision_test
        REDIS_URL: redis://localhost:6379
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Build and test Docker images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push API service
      uses: docker/build-push-action@v5
      with:
        context: ./services/api
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/vision-api:latest
          ${{ secrets.DOCKER_USERNAME }}/vision-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push AI service
      uses: docker/build-push-action@v5
      with:
        context: ./services/ai
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/vision-ai:latest
          ${{ secrets.DOCKER_USERNAME }}/vision-ai:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Web app
      uses: docker/build-push-action@v5
      with:
        context: ./apps/web
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/vision-web:latest
          ${{ secrets.DOCKER_USERNAME }}/vision-web:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start services
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        API_URL: http://localhost:3001
        AI_SERVICE_URL: http://localhost:8000
        
    - name: Stop services
      run: docker-compose -f docker-compose.test.yml down

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster vision-staging \
          --service vision-api \
          --force-new-deployment
        aws ecs update-service \
          --cluster vision-staging \
          --service vision-ai \
          --force-new-deployment
        aws ecs update-service \
          --cluster vision-staging \
          --service vision-web \
          --force-new-deployment

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test, security]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster vision-production \
          --service vision-api \
          --force-new-deployment
        aws ecs update-service \
          --cluster vision-production \
          --service vision-ai \
          --force-new-deployment
        aws ecs update-service \
          --cluster vision-production \
          --service vision-web \
          --force-new-deployment
          
    - name: Notify deployment
      run: |
        echo "ðŸš€ Vision Platform v${{ github.event.release.tag_name }} deployed to production!"
        # Add notification logic here (Slack, email, etc.)

  # Create release package
  release:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create release package
      run: |
        chmod +x scripts/zip_release.sh
        ./scripts/zip_release.sh
        
    - name: Upload release package
      uses: actions/upload-artifact@v3
      with:
        name: vision-release-${{ github.event.release.tag_name }}
        path: vision-monorepo-*.zip
        retention-days: 30

name: Vision Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Frontend Testing & Building
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run tests
      run: npm run test -- --coverage --watchAll=false

    - name: Build application
      run: npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Backend Testing & Building
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run tests
      run: npm run test -- --coverage --watchAll=false

    - name: Build application
      run: npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # AI Service Testing
  ai-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai_service

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      run: |
        black --check .
        flake8 .
        mypy .

    - name: Run tests
      run: |
        python -m pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./ai_service/coverage.xml
        flags: ai-service
        name: ai-service-coverage

  # Docker Build & Test
  docker:
    runs-on: ubuntu-latest
    needs: [frontend, backend, ai-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test Docker images
      run: |
        docker-compose build
        docker-compose up -d
        sleep 30
        docker-compose ps
        docker-compose logs

    - name: Test Docker services
      run: |
        # Test frontend
        curl -f http://localhost:3000 || exit 1
        
        # Test backend
        curl -f http://localhost:3001 || exit 1
        
        # Test AI service
        curl -f http://localhost:8000/health || exit 1

    - name: Cleanup Docker
      if: always()
      run: docker-compose down -v

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging (on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [frontend, backend, ai-service, docker, security]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply, docker push, etc.

    - name: Notify deployment
      run: |
        echo "Staging deployment completed successfully!"

  # Deploy to Production (manual trigger)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [frontend, backend, ai-service, docker, security]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply, docker push, etc.

    - name: Notify deployment
      run: |
        echo "Production deployment completed successfully!"

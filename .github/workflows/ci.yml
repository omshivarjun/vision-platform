name: Vision Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1

jobs:
  # Shared package build and test
  shared:
    name: Build & Test Shared Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build:shared

      - name: Run shared package tests
        run: npm run test:shared

      - name: Run shared package linting
        run: npm run lint:shared

      - name: Type check shared package
        run: npm run type-check:shared

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: packages/shared/coverage/lcov.info
          flags: shared
          name: shared-coverage

  # Web app build and test
  web:
    name: Build & Test Web App
    runs-on: ubuntu-latest
    needs: shared
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build:shared

      - name: Build web app
        run: npm run build:web

      - name: Run web app tests
        run: npm run test:web

      - name: Run web app linting
        run: npm run lint:web

      - name: Type check web app
        run: npm run type-check:web

      - name: Run E2E tests
        uses: cypress-io/github-action@v6
        with:
          start: npm run dev:web
          wait-on: 'http://localhost:3000'
          browser: chrome
          record: false
          config: apps/web/cypress.config.ts

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: apps/web/coverage/lcov.info
          flags: web
          name: web-coverage

  # API service build and test
  api:
    name: Build & Test API Service
    runs-on: ubuntu-latest
    needs: shared
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

      redis:
        image: redis:7.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin123
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9000:9000
          - 9001:9001

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build:shared

      - name: Build API service
        run: npm run build:api

      - name: Run API service tests
        run: npm run test:api

      - name: Run API service linting
        run: npm run lint:api

      - name: Type check API service
        run: npm run type-check:api

      - name: Run integration tests
        run: npm run test:api:integration
        env:
          MONGODB_URI: mongodb://admin:password123@localhost:27017/vision_platform_test?authSource=admin
          REDIS_URL: redis://localhost:6379
          MINIO_ENDPOINT: localhost:9000
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin123
          JWT_SECRET: test-jwt-secret
          JWT_REFRESH_SECRET: test-refresh-secret

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: services/api/coverage/lcov.info
          flags: api
          name: api-coverage

  # AI service build and test
  ai:
    name: Build & Test AI Service
    runs-on: ubuntu-latest
    needs: shared
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          cd services/ai
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Build shared package
        run: |
          npm ci
          npm run build:shared

      - name: Run AI service tests
        run: |
          cd services/ai
          python -m pytest tests/ --cov=app --cov-report=xml --cov-report=html

      - name: Run AI service linting
        run: |
          cd services/ai
          pip install flake8 black isort
          flake8 app/ tests/
          black --check app/ tests/
          isort --check-only app/ tests/

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: services/ai/coverage.xml
          flags: ai
          name: ai-coverage

  # Mobile app build and test
  mobile:
    name: Build & Test Mobile App
    runs-on: ubuntu-latest
    needs: shared
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build:shared

      - name: Install Expo CLI
        run: npm install -g @expo/cli

      - name: Run mobile app tests
        run: npm run test:mobile

      - name: Run mobile app linting
        run: npm run lint:mobile

      - name: Type check mobile app
        run: npm run type-check:mobile

      - name: Build Android APK
        run: |
          cd apps/mobile
          npm run build:android

      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: mobile-apk
          path: apps/mobile/android/app/build/outputs/apk/debug/app-debug.apk

  # Docker build and test
  docker:
    name: Build & Test Docker Images
    runs-on: ubuntu-latest
    needs: [shared, web, api, ai, mobile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build shared package
        run: npm ci && npm run build:shared

      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.prod.yml build

      - name: Test Docker images
        run: |
          docker-compose -f docker-compose.prod.yml up -d
          sleep 30
          docker-compose -f docker-compose.prod.yml ps
          docker-compose -f docker-compose.prod.yml logs
          docker-compose -f docker-compose.prod.yml down

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [shared, web, api, ai, mobile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          npm ci
          npm audit --audit-level=moderate

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker, security]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.prod.yml build
          docker tag vision-api:latest ${{ steps.login-ecr.outputs.registry }}/vision-api:staging
          docker tag vision-ai-service:latest ${{ steps.login-ecr.outputs.registry }}/vision-ai-service:staging
          docker tag vision-web:latest ${{ steps.login-ecr.outputs.registry }}/vision-web:staging
          docker push ${{ steps.login-ecr.outputs.registry }}/vision-api:staging
          docker push ${{ steps.login-ecr.outputs.registry }}/vision-ai-service:staging
          docker push ${{ steps.login-ecr.outputs.registry }}/vision-web:staging

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster vision-staging --service vision-api --force-new-deployment
          aws ecs update-service --cluster vision-staging --service vision-ai-service --force-new-deployment
          aws ecs update-service --cluster vision-staging --service vision-web --force-new-deployment

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, security]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.prod.yml build
          docker tag vision-api:latest ${{ steps.login-ecr.outputs.registry }}/vision-api:latest
          docker tag vision-ai-service:latest ${{ steps.login-ecr.outputs.registry }}/vision-ai-service:latest
          docker tag vision-web:latest ${{ steps.login-ecr.outputs.registry }}/vision-web:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/vision-api:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/vision-ai-service:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/vision-web:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster vision-production --service vision-api --force-new-deployment
          aws ecs update-service --cluster vision-production --service vision-ai-service --force-new-deployment
          aws ecs update-service --cluster vision-production --service vision-web --force-new-deployment

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated production deployment
            - Build: ${{ github.sha }}
            - Triggered by: ${{ github.actor }}
          draft: false
          prerelease: false

  # Performance testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start services
        run: |
          docker-compose -f docker-compose.prod.yml up -d
          sleep 60

      - name: Run performance tests
        run: |
          npm run test:performance

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.json

  # Final summary
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [shared, web, api, ai, mobile, docker, security]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.shared.result == 'success' && needs.web.result == 'success' && needs.api.result == 'success' && needs.ai.result == 'success' && needs.mobile.result == 'success' && needs.docker.result == 'success' && needs.security.result == 'success' && '✅ All checks passed' || '❌ Some checks failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Shared Package: ${{ needs.shared.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Web App: ${{ needs.web.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- API Service: ${{ needs.api.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- AI Service: ${{ needs.ai.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Mobile App: ${{ needs.mobile.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build: ${{ needs.docker.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY

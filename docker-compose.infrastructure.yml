version: '3.8'

services:
  # Database Services
  mongodb:
    image: mongo:7.0
    container_name: vision-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: vision_platform
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./infrastructure/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - vision-network

  redis:
    image: redis:7.2-alpine
    container_name: vision-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vision-network

  # Object Storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: vision-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - vision-network

  # API Service
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
      target: development
    container_name: vision-api
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/vision_platform?authSource=admin
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      CORS_ORIGIN: http://localhost:3000,http://localhost:19006
      AI_SERVICE_URL: http://ai-service:8000
    ports:
      - "3001:3001"
    volumes:
      - ./services/api:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - redis
      - minio
    networks:
      - vision-network

  # AI Service
  ai-service:
    build:
      context: ./services/ai
      dockerfile: Dockerfile
      target: development
    container_name: vision-ai-service
    restart: unless-stopped
    environment:
      PYTHONPATH: /app
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/vision_platform?authSource=admin
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GOOGLE_CLOUD_CREDENTIALS: ${GOOGLE_CLOUD_CREDENTIALS:-}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY:-}
      MODEL_CACHE_DIR: /app/models
      ENABLE_GPU: ${ENABLE_GPU:-false}
    ports:
      - "8000:8000"
    volumes:
      - ./services/ai:/app
      - ai_models:/app/models
    depends_on:
      - mongodb
      - redis
      - minio
    networks:
      - vision-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vision-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - ai-service
    networks:
      - vision-network

  # Monitoring & Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: vision-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - vision-network

  grafana:
    image: grafana/grafana:latest
    container_name: vision-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - vision-network

volumes:
  mongodb_data:
  redis_data:
  minio_data:
  ai_models:
  prometheus_data:
  grafana_data:

networks:
  vision-network:
    driver: bridge



services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: vision-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: vision_platform
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - vision-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: vision-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vision-network

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: vision-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - vision-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vision-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - ai-service
      - frontend
    networks:
      - vision-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vision-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/vision_platform?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 7d
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: vision-platform
      AI_SERVICE_URL: http://ai-service:8000
    ports:
      - "3001:3001"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      - mongodb
      - redis
      - minio
    networks:
      - vision-network

  # AI Service
  ai-service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    container_name: vision-ai-service
    restart: unless-stopped
    environment:
      ENVIRONMENT: production
      PORT: 8000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/vision_platform?authSource=admin
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: vision-platform
      MODEL_CACHE_DIR: /app/models
      LOG_LEVEL: info
    ports:
      - "8000:8000"
    volumes:
      - ./ai_service/models:/app/models
      - ./ai_service/logs:/app/logs
      - ./ai_service/uploads:/app/uploads
    depends_on:
      - mongodb
      - redis
      - minio
    networks:
      - vision-network

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vision-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_AI_SERVICE_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - ai-service
    networks:
      - vision-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  vision-network:
    driver: bridge

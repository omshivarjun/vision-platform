services:
  # Database Services
  mongodb:
    image: mongo:7.0
    container_name: vision-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: vision_platform
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./infrastructure/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - vision-network

  redis:
    image: redis:7.2-alpine
    container_name: vision-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vision-network

  # Object Storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: vision-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - vision-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: vision-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      MONGODB_URI: ${MONGODB_URI}
      REDIS_URL: ${REDIS_URL}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: http://localhost:3000,http://localhost:19006
      AI_SERVICE_URL: http://ai-service:8000
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test_...}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      # Translation Service Configuration - FIXED
      DEFAULT_TRANSLATION_PROVIDER: ${DEFAULT_TRANSLATION_PROVIDER:-huggingface}
      ENABLE_FUNCTION_CALLING: ${ENABLE_FUNCTION_CALLING:-false}
      TRANSLATION_CACHE_TTL: ${TRANSLATION_CACHE_TTL:-3600}
      MAX_TRANSLATION_LENGTH: ${MAX_TRANSLATION_LENGTH:-5000}
      # Test Configuration
      TEST_MONGODB_URI: ${TEST_MONGODB_URI}
      TEST_REDIS_URL: ${TEST_REDIS_URL}
      TEST_TIMEOUT: ${TEST_TIMEOUT:-10000}
      E2E_TIMEOUT: ${E2E_TIMEOUT:-30000}
      # Google Cloud Platform (GCP) Services
      GOOGLE_CLOUD_PROJECT: ${GOOGLE_CLOUD_PROJECT:-}
      GOOGLE_CLOUD_CREDENTIALS: ${GOOGLE_CLOUD_CREDENTIALS:-}
      GOOGLE_CLOUD_STORAGE_BUCKET: ${GOOGLE_CLOUD_STORAGE_BUCKET:-vision-platform-files}
      GOOGLE_CLOUD_REGION: ${GOOGLE_CLOUD_REGION:-us-central1}
      GOOGLE_CLOUD_ZONE: ${GOOGLE_CLOUD_ZONE:-us-central1-a}
      # Push Notifications
      FCM_SERVER_KEY: ${FCM_SERVER_KEY:-}
      APN_KEY_ID: ${APN_KEY_ID:-}
      APN_TEAM_ID: ${APN_TEAM_ID:-}
      APN_PRIVATE_KEY: ${APN_PRIVATE_KEY:-}
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      - mongodb
      - redis
      - minio
    networks:
      - vision-network

  # AI Service
  ai-service:
    build:
      context: ./services/ai
      dockerfile: Dockerfile
      target: development
    container_name: vision-ai-service
    restart: unless-stopped
    environment:
      PYTHONPATH: /app
      MONGODB_URI: ${MONGODB_URI}
      REDIS_URL: ${REDIS_URL}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GOOGLE_CLOUD_CREDENTIALS: ${GOOGLE_CLOUD_CREDENTIALS:-}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY:-}
      MODEL_CACHE_DIR: /app/models
      ENABLE_GPU: ${ENABLE_GPU:-false}
      # AI Service Configuration - FIXED
      DEFAULT_TRANSLATION_PROVIDER: ${DEFAULT_TRANSLATION_PROVIDER:-mock}
      ENABLE_FUNCTION_CALLING: ${ENABLE_FUNCTION_CALLING:-false}
      TRANSLATION_CACHE_TTL: ${TRANSLATION_CACHE_TTL:-3600}
      MAX_TRANSLATION_LENGTH: ${MAX_TRANSLATION_LENGTH:-5000}
    ports:
      - "8000:8000"
    volumes:
      - ./services/ai:/app
      - ai_models:/app/models
    depends_on:
      - mongodb
      - redis
      - minio
    networks:
      - vision-network

  # Web Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: development
    container_name: vision-web
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_AI_SERVICE_URL: http://localhost:8000
      NEXT_PUBLIC_WEBSOCKET_URL: ws://localhost:3001
    ports:
      - "3000:5173"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
      - ai-service
    networks:
      - vision-network

  # Mobile Development Server (Expo)
  mobile:
    build:
      context: ./apps/mobile
      dockerfile: Dockerfile
      target: development
    container_name: vision-mobile
    restart: unless-stopped
    environment:
      NODE_ENV: development
      EXPO_DEVTOOLS_LISTEN_ADDRESS: 0.0.0.0
      EXPO_PUBLIC_API_URL: http://localhost:3001
      EXPO_PUBLIC_AI_SERVICE_URL: http://localhost:8000
    ports:
      - "19000:19000"
      - "19001:19001"
      - "19002:19002"
    volumes:
      - ./apps/mobile:/app
      - /app/node_modules
    depends_on:
      - backend
      - ai-service
    networks:
      - vision-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vision-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
      - backend
      - ai-service
    networks:
      - vision-network

  # Monitoring & Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: vision-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - vision-network

  grafana:
    image: grafana/grafana:latest
    container_name: vision-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - vision-network

volumes:
  mongodb_data:
  redis_data:
  minio_data:
  ai_models:
  prometheus_data:
  grafana_data:

networks:
  vision-network:
    driver: bridge

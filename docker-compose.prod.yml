# Production Docker Compose configuration
services:
  # MongoDB Database - Production
  mongodb:
    image: mongo:7.0
    container_name: vision-mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: vision_platform
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - vision-network-prod
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis Cache - Production
  redis:
    image: redis:7.2-alpine
    container_name: vision-redis-prod
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vision-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # MinIO (S3-compatible storage) - Production
  minio:
    image: minio/minio:latest
    container_name: vision-minio-prod
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - vision-network-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Nginx Reverse Proxy - Production
  nginx:
    image: nginx:alpine
    container_name: vision-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - ./nginx/cache:/var/cache/nginx
    depends_on:
      - backend
      - ai-service
      - frontend
    networks:
      - vision-network-prod
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Backend API Service - Production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: vision-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/vision_platform?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: vision-platform
      AI_SERVICE_URL: http://ai-service:8000
      SENTRY_DSN: ${SENTRY_DSN}
      LOG_LEVEL: info
    ports:
      - "3001:3001"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      - mongodb
      - redis
      - minio
    networks:
      - vision-network-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      replicas: 2

  # AI Service - Production
  ai-service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
      target: production
    container_name: vision-ai-service-prod
    restart: always
    environment:
      ENVIRONMENT: production
      PORT: 8000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/vision_platform?authSource=admin
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: vision-platform
      MODEL_CACHE_DIR: /app/models
      LOG_LEVEL: info
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
      USE_LOCAL_MODELS: ${USE_LOCAL_MODELS:-true}
    ports:
      - "8000:8000"
    volumes:
      - ./ai_service/models:/app/models
      - ./ai_service/logs:/app/logs
      - ./ai_service/uploads:/app/uploads
    depends_on:
      - mongodb
      - redis
      - minio
    networks:
      - vision-network-prod
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      replicas: 1

  # Frontend Web App - Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: vision-frontend-prod
    restart: always
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_AI_SERVICE_URL: ${NEXT_PUBLIC_AI_SERVICE_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
      NEXT_PUBLIC_GA_ID: ${NEXT_PUBLIC_GA_ID}
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - ai-service
    networks:
      - vision-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      replicas: 2

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: vision-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - vision-network-prod

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: vision-grafana
    restart: always
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - vision-network-prod

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  vision-network-prod:
    driver: bridge
